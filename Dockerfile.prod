# Production Dockerfile with additional optimizations
FROM golang:1.24.2-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o webhook-fanout .

# Final stage - distroless for maximum security
FROM gcr.io/distroless/static-debian11

# Copy binary from builder stage
COPY --from=builder /app/webhook-fanout /webhook-fanout

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["/webhook-fanout", "-health-check"]

# Run the application
ENTRYPOINT ["/webhook-fanout"]
